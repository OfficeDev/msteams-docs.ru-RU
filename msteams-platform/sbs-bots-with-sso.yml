### YamlMime:Tutorial
title: Teams Бот с одним входом
metadata:
  title: Teams Бот с SSO
  description: В этом руководстве вы узнаете, как настроить SSO в боте для Teams.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Подробнее о проверке подлинности ботов
  ms.custom: mvc
  ms.openlocfilehash: 1b95b4010ce1c3b1340c1ddb4357645383c93497
  ms.sourcegitcommit: b83e1ade63869be10e4fcdc963d6bab7c5311a5b
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 08/26/2021
  ms.locfileid: "58538162"
items:
- durationInMinutes: 1
  content: "Teams боты — это диалоговые боты, которые запускают повторяющиеся автоматические задачи, которые делают пользователи, например служба поддержки клиентов. Пользователю необходимо несколько раз войти с учетными данными для выполнения повторяющихся задач. Метод проверки подлинности единой регистрации (SSO) в Azure Active Directory (AAD) безмолвно обновляет маркер проверки подлинности. Это приводит к сокращению числа случаев, когда пользователям необходимо вводить учетные данные входа. \n\nБот ведет себя по-разному в зависимости от разговора, в который он вовлечен:\n\n* Боты в беседах с каналами и групповыми чатами требуют от пользователя @mention бота.\n* Ботам в личной беседе не требуют @упоминания. Все сообщения, отправленные пользователем, отправляются в бот.\n\nЭто пошаговое руководство по созданию бота с включенной проверкой подлинности SSO. Вы увидите следующий вывод:\n\n![Mobile, вписався в бот](~/assets/images/bots/sbs-desktop-mobile.png)\n"
- title: Предварительные требования
  durationInMinutes: 1
  content: "Убедитесь, что вы установите следующие средства и настроите среду разработки:  \n\n* Microsoft Teams с учетной записью (а не гостевой учетной записью)\n* [ngrok или](https://ngrok.com/) эквивалентное решение тоннелей\n* Visual Studio 2019 или последней версии\n* [Microsoft 365 учетной](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) записи разработчика или доступа Teams учетной записи с соответствующими разрешениями на установку приложения\n"
- title: Настройка бота в службе Azure Bot
  durationInMinutes: 5
  content: "Чтобы проверить подлинность бота с помощью SSO, можно настроить бот в службе Azure Bot. Зарегистрируйте бота в службе Azure Bot Service при разработке и его хозяйской службе в Azure. Выполните следующие действия:\n\n* Для создания туннеля к конечным точкам веб-сервера используйте ngrok.\n* Создайте ресурс Azure Bot для регистрации бота в службе Azure Bot.\n* Создание секрета клиента, который позволяет SSO-проверку подлинности бота.\n* Добавьте Microsoft Teams канал, чтобы развернуть бот в Teams канал.\n* Добавьте конечную точку обмена сообщениями в созданный туннель ngrok.\n\nИспользуйте ngrok для создания туннеля для общедоступных конечных точек HTTPS локального запуска веб-сервера. Запустите следующую команду в ngrok:\n\n```bash\nngrok http -host-header=rewrite 3978\n```\n\n**Создание ресурса Azure Bot**\n\n1. Перейдите на [портал Azure](https://portal.azure.com/).\n1. Выберите **Создать ресурс**.\n1. В поле поиска введите **бот Azure и** выберите ключ Enter.\n1. Выберите **Azure Bot**.\n\n    ![Создание карты-бота Azure](~/assets/images/bots/createazurebot.png)\n\n1. Нажмите **Создать**.\n1. Введите необходимое имя ручки бота в **ручке Bot.**\n1. Из списка **выпаданий** подписки выберите подписку.\n1. Из списка **выпаданий** группы Ресурсов выберите группу ресурсов.\n    \n    Чтобы создать новый ресурс, выберите **Создание** нового, введите имя ресурса,  выберите **ОК** и выберите необходимое расположение из списка выпаданий расположения группы новых ресурсов.\n\n    > [!NOTE]\n    > В разделе Microsoft App ID уже выбран **новый ID** приложения Майкрософт. Вы можете выбрать **использование существующей регистрации приложений,** ввести **существующий** код приложения и ввести **пароль существующего приложения.**\n\n1. Выберите **Проверить и создать**.\n\n    <img src=\"~/assets/images/bots/Azurebotcreate.png\" alt=\"Create resource Azure bot\" width=\"700\"/>\n\n1. Если проверка проходит, выберите **Создать**.\n\n    Подготовка службы бота занимает несколько минут.\n\n1. Выберите пункт **Перейти к ресурсу**. Бот и связанные ресурсы перечислены в группе ресурсов.\n\n    Теперь создан бот Azure.\n\n    ![Созданный ресурс бота Azure](~/assets/images/bots/Azurebotresource.png)\n\n**Создание секрета клиента**\n\n1. В **Параметры** выберите **Конфигурация**. Сохраните **для будущей ссылки ID** приложения Майкрософт (клиентский ID).\n1. Рядом с **Microsoft App ID** выберите **Управление**.\n\n    ![Microsoft App ID](~/assets/images/bots/MicrosoftAppID.png)\n\n1. В разделе **Секреты клиента** выберите новый **секрет клиента.** Появится **окно \"Добавление секрета клиента\".**  \n\n1. Введите **Описание** и выберите **Добавить**.\n\n    <img src=\"~/assets/images/bots/addclientsecret.png\" alt=\"Add client secret to app\" width=\"500\"/>\n\n1. В **столбце Значение** выберите **Копию для буфера обмена** данными и сохраните секретный ИД клиента для будущей ссылки.\n\n   ![Значение секрета клиента](~/assets/images/bots/valueclientsecret.png)\n\n**Добавление канала Microsoft Teams**\n\n1. Перейдите к **дому**.\n\n    <img src=\"~/assets/images/bots/homepage.png\" alt=\"Home page\" width=\"600\"/>\n\n1. Откройте бот, который указан в разделе **Последние ресурсы.**\n1. Выберите **каналы в** левой области и выберите **Teams** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n1. Нажмите **Сохранить**.\n1. Выберите почтовый ящик, чтобы принять условия службы и выбрать **Согласование.**\n\n**Добавление конечной точки обмена сообщениями**\n\n1. В **Параметры** для созданного вами бота Azure выберите **Конфигурация.**\n1. Перейдите в ngrok.\n1. Скопируйте URL-адрес HTTPS (https to io), как показано на следующем изображении:\n\n    ![URL-адрес https ngrok](~/assets/images/bots/ngrokURL.png)\n\n1. В **конечной точке** обмена сообщениями используйте URL-адрес HTTPS, доступный в ngrok и в конце **URL-адреса добавить /api/messages.**\n\n    <img src=\"~/assets/images/bots/messagingURL.png\" alt=\"Messaging endpoint\" width=\"600\"/>\n\n1. Нажмите **Применить**.\n\n    Вы успешно создали бот в службе Azure Bot Service, и теперь необходимо настроить подключение к службе ботов.\n"
- title: Настройка SSO для бота
  durationInMinutes: 5
  content: >
    Чтобы служба ботов позволила пользователю войти и получить доступ к боту, необходимо настроить SSO для бота. Для этого выполните следующие действия:


    * Добавьте URI перенаправления в ресурс бота Azure.

    * Обнародуйте конечную точку API, чтобы указать расположение, откуда можно получить доступ к ресурсам.

    * Настройка подключения к службе bot.


    **Добавление URI перенаправления в ресурс бота Azure**


    1. В левой области ресурса бота выберите проверку **подлинности.**

    1. В **конфигурациях платформы** выберите **Добавить платформу.**

    1. Выберите платформу **Веб**.


    1. Введите **URL-адреса** перенаправления как **https://token.botframework.com/.auth/web/redirect** и выберите **Настройка.**

        <img src="~/assets/images/bots/redirectURI.png" alt="Configure Redirect URI" width="600"/>

        URI перенаправления добавляется в ресурс бота Azure.

        ![Перенаправление URI, добавленного в бот-ресурс](~/assets/images/bots/redirectURIadded.png)

    **Для разоблачения конечной точки API**


    1. На левой области выберите **Expose API**.

    1. Выберите **set** for the Application ID URI.

    1. Используйте показанный URI ID приложения и **api://botid- в** начале URI.

        <img src="~/assets/images/bots/exposeAPI.png" alt="Expose an API" width="500"/>

    1. Нажмите **Сохранить**. Сохраните **URI ID приложения для** будущей ссылки.

    1. Нажмите **Добавить область**.

    1. В **поле имя**, **введите access_as_user**.

    1. В **Кто может согласиться?**, переключиться на **администраторов и пользователей**.

    1. Введите следующие значения в полях:

        | Поле | Значение |
        | ----- | ----- |
        | Имя отображения согласия администратора | Teams может получить доступ к профилю пользователя |
        | Описание согласия администратора | Позволяет Teams вызов веб-API приложения в качестве текущего пользователя. |
        | Имя отображения согласия пользователя | Teams получить доступ к профиле пользователя и сделать запросы от вашего имени |
        | Описание согласия пользователя | Включить Teams для вызова API этого приложения с тем же правам, что и у вас. |

    1. Убедитесь, что параметру **Состояние** присвоено значение **Включено**.

        <img src="~/assets/images/bots/addscope.png" alt="Add a scope to app" width="500"/>

    1. Нажмите кнопку **Добавить область**. Имя области автоматически совпадает с URI приложения, access_as_user **добавлен** до конца.

        ![API, выставленный и добавленный объем](~/assets/images/bots/ExposeAPIandaddscope.png)

    **Настройка подключения к службе bot**


    1. Выберите **Добавить подключение OAuth Параметры**.

    1. В **новом параметре подключения** введите следующие сведения:

        | Поле | Значение или описание |
        | ----- | ----- |
        | Имя | Введите имя для нового параметра подключения. Имя можно использовать в настройках кода службы бота. |
        | Service Provider | Выберите **Azure Active Directory V2**. |
        | ID клиента | Сохраненный ранее в **качестве microsoft App ID**. |
        | Секрет клиента | Сохранено ранее **в качестве значения** секретного ID клиента. |
        | URL Exchange маркера | Используйте **URL-адрес ID приложения,** полученный ранее при разоблачении конечной точки API. |
        | Идентификатор клиента | Введите **общие**. |
        | Scopes | Введите **User.Read** и  добавьте все области, необходимые при указании разрешений для API ниже по течению. |

        <img src="~/assets/images/bots/botserviceconnection.png" alt="Bot Service connection" width="300"/>

    1. Нажмите **Сохранить**.

    1. Нажмите **Применить**.
- title: Настройка и запуск образца бота
  durationInMinutes: 1
  content: >
    Настройте образец бота, чтобы понять, как проверить подлинность разговорного бота в Microsoft Teams.


    **Настройка и запуск образца бота**


    1. Откройте Visual Studio.

    1. В Visual Studio выберите **клон репозиторий**.

    1. В **расположении Репозиторий** введите **https://github.com/OfficeDev/Microsoft-Teams-Samples.git** . Убедитесь, что вы **обратите внимание на путь,** на котором клонирован репозиторий.

    1. Выберите **файл > Open > Project/Solution**.

    1. Перейдите **в microsoft-Teams-Samples > примеры >-bot-conversation-sso-quickstart > csharp_dotnetcore** папке.

    1. Откройте **файл BotSSOCSharp.csproj.**

    1. Откройтеappsettings.js **файл.**

    1. Обновлениеappsettings.js **конфигурации** для бота для использования `MicrosoftAppId` и `MicrosoftAppPassword` . Используйте имя подключения OAuth в качестве **имени подключения.**

        > [!NOTE]
        > Вы можете получить `MicrosoftAppId` страницу конфигурации бота. Это `MicrosoftAppPassword` ИД секрета клиента, сохраненный ранее.

        ![Appsettings json](~/assets/images/bots/appsettingsjson.png)

    1. Выберите **клавишу F5** для запуска этого проекта.

        <br>

        <details>

        <summary><b>Устранение неполадок</b></summary>

        Если вы не можете найти **ошибку** пакета, выполните следующие действия:

        1.  Перейдите к  >  **средствам NuGet диспетчер пакетов**  >  **диспетчер пакетов Параметры**.
        1.  В **окне Параметры,** которое отображается, **выберите NuGet диспетчер пакетов**  >  **источники пакета**.
        1.  Нажмите **Добавить**.
        1.  В **Name** введите **nuget.org** и в **Источник**, введите **https://api.nuget.org/v3/index.json** .
        1.  Выберите **Обновление** и **ОК.**
        1.  Перестройка проекта.
        <br>

        </details>
- title: Настройка и запуск Teams приложения
  durationInMinutes: 2
  content: >
    Наиболее полный способ тестирования бота — это создание пакета приложений и его загрузка в Teams. Этот метод является единственным способом проверки всех функциональных возможностей, доступных вашему боту, во всех сферах. Вы можете настроить и запустить приложение Teams, загрузивmanifest.zip **файл.**


    **Чтобы запустить Teams, загрузив manifest.zip файл**


    1. В Visual Studio перейдите в **папку appPackage/.**

    1. Откройтеmanifest.js **файл.**

    1. Вmanifest.js **файле** найдите **{TODO: MicrosoftAppId}** и замените его на свой Microsoft App ID.

    1. В Windows Explorer перейдите в папку **Microsoft-Teams-Samples > примеры >-bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage.**

    1. Zip содержимое **appPackage /** папки для **созданияmanifest.zip**.

    1. Перейдите в Teams.

    1. Чтобы загрузить **manifest.zip,** выберите Store > Управление приложениями > Upload **настраиваемом** приложении и **откройтеmanifest.zip**.

    1. Выберите **Добавить,** чтобы добавить бот беседы в чат.

        Вы можете взаимодействовать с этим ботом, отправив ему сообщение. Бот обменивается маркером SSO и делает вызов Graph API от вашего имени и возвращает результаты. Он сохраняет вас во входе, если вы не отправляете сообщение для входа в **систему.**

    1. Отправьте сообщение боту. Бот беседы просит разрешения в первый раз.

        ![Разрешения на бот](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. Выберите **Продолжить** прием разрешений.


    1. Выберите **Accept** for **Permissions requested**.

        ![Mobile, вписався в бот](~/assets/images/bots/sbs-desktop-mobile.png)
- title: Полная задача
  durationInMinutes: 1
  content: >
    Вы придумали что-то подобное?


    ![Mobile, вписався в бот](~/assets/images/bots/sbs-desktop-mobile.png)
- content: Вы завершили руководство по началу работы с SSO в боте для Microsoft Teams с помощью Bot Framework.
