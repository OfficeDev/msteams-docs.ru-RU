### YamlMime:Tutorial
title: Отправка активных сообщений
metadata:
  title: Отправка активных сообщений
  description: В этом сценарии вы узнаете, как отправлять проактивные сообщения
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Дополнительные дополнительные публикации об упреждающих сообщениях
  ms.custom: mvc
  ms.openlocfilehash: 4a6a30bd038c5117024c67a7786995391351e0fe
  ms.sourcegitcommit: 7f9b3c1654536a88015f1b11b6c8a0f612b111c4
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 07/14/2021
  ms.locfileid: "53434468"
items:
- durationInMinutes: 1
  content: "Проактивное сообщение — это любое сообщение, отправленное ботом, которое не является ответом на запрос пользователя. Это может включать такие сообщения, как:\n - Приветствия\n - Уведомления\n - Запланированные сообщения\n \nЭто пошаговое руководство помогает отправлять упреждающие сообщения от бота. Вы увидите следующие выходы:\n\n* Проактивное сообщение привета в чате        \n![Активный привет в чате](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* Проактивное сообщение привета в качестве адаптивной карты    \n![активный привет в адаптивной карте](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: Предварительные требования
  durationInMinutes: 2
  content: "Убедитесь, что вы установите следующее:    \n\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/).\n* [ASP.NET и веб-разработки](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer)или рабочей нагрузки на межплатформу [.NET Core.](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer)\n* [ngrok](https://ngrok.com/download): межплатформеное приложение, которое позволяет с минимальными усилиями выставлять локальный сервер разработки в Интернет.\n* [Получите бесплатный клиент Teams разработчика.](https://developer.microsoft.com/en-us/microsoft-365/dev-program)\n"
- title: Настройка локальной среды
  durationInMinutes: 3
  content: "1.  Скачайте [пример кода](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (zip-файл) и извлеките файлы.\n1.  Перейдите к извлеченным файлам и дважды щелкните **ProactiveBot.csproj**. Решение открывается в Visual Studio.\n1.  В Visual Studio щелкните правой кнопкой мыши проект **(ProactiveBot)** и выберите **Сборку** для создания решения.\n\n    ![Проект Proactivebot](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>Устранение неполадок</b></summary>\n\n    Если вы не можете найти **ошибку** пакета, выполните следующие действия:\n\n    1.  Перейдите к  >  **средствам NuGet диспетчер пакетов**  >  **диспетчер пакетов Параметры**.\n    1.  В **окне Параметры,** которое отображается, **выберите NuGet диспетчер пакетов**  >  **источники пакета**.\n    1.  Нажмите **Добавить**.\n    1.  Введите **nuget.org** в **поле Имя** и **https://api.nuget.org/v3/index.json** **Источник.**\n    1.  Выберите **Обновление** и **ОК.**\n    1.  Перестройка проекта.\n    <br>\n\n    </details>\n    \n1. Unzip to install ngrok.\n   * Windows: дважды **щелкнитеngrok.zip**.\n   * Linux или OS X. Снимите ngrok с терминала и запустите `unzip /path/to/ngrok.zip` команду.\n1. Запустите ngrok из командной строки со следующими аргументами:\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. Скопируйте URL-адрес ngrok (как посветилось на изображении) для дальнейшей ссылки в качестве базового URL-адреса ngrok в следующих действиях. \n\n    ![URL-адрес базы ngrok](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: Создание и установка Teams приложения
  durationInMinutes: 5
  content: "1. Перейдите в Teams > **App Studio** и **импортирует** AppManifest.zipфайл, доступный в скачаемом примере кода (zip-файл).\n\n    ![Приложение импорта App Studio](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. Настройка   >  **ботов.**\n\n    ![Настройка бота](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. В **окне Настройка** окна бота введите **Имя** (например, Проактивное демо сообщения), выберите **Личный** и выберите **Создать** бота для создания бота.\n\n    ![Создание bot ID](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. Приложение **/api/messages** к базовому URL-адресу ngrok (который вы скопировали) и установите его в качестве конечного адреса **бота.** URL-адрес будет выглядеть так: `https://yourngrokdomain.ngrok.io/api/messages` .\n\n    ![Адрес конечной точки бота](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. Подождите несколько секунд, чтобы изменения вступили в силу.     \n\n    > Если это больше времени, выберите **вкладки,** а затем раздел **Боты** для принудительного обновления.\n    \n1. Выберите **Создание нового пароля для** создания нового пароля приложения и его копирования. \n\n    ![Создание пароля приложения](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. Перейдите Visual Studio и **откройтеappsettings.jsфайл.**  Вклейте пароль в качестве значения `MicrosoftAppPassword` для .    \n1. Перейдите **в App Studio** и скопируйте ID приложения. \n\n    ![Создание ID приложения](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. Перейдите Visual Studio и **откройтеappsettings.jsфайл.**  Вклеить ID приложения в качестве значения `MicrosoftAppId` для . У `appsettings.json` вас будут следующие значения параметров:    \n\n    ![Значения appsetting](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. Нажмите **кнопку F5** или **выберите IIS express для** запуска кода.\n\n    ![Запуск кода](~/assets/images/proactive-scenario/run-code.png)\n\n    В соответствующем примере упреждающего сообщения отображается:  \n\n    ![Пример проактивного сообщения](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. Перейдите **к тесту и**  >  **раздайте Установить,** чтобы установить одно и то же приложение снова.\n\n    ![Установка приложения](~/assets/images/proactive-scenario/install-app.png)   \n\n1. Выберите [http://localhost:3978/api/notify](http://localhost:3978/api/notify) URL-адрес, чтобы получить упреждающий привет в чате.\n\n    ![Отправленное проактивное сообщение](~/assets/images/proactive-scenario/result.png)\n\n1. Перейдите в Teams. При успешной установке от бота получается упреждающий привет от бота.          \n\n    ![Активный привет в чате](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: Добавление адаптивной карты в проактивное сообщение
  durationInMinutes: 10
  content: "1. В Visual Studio остановите процесс отладки.\n\n    ![Остановка отлаговки](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. Правой кнопкой мыши **Зависимостей**, выберите **Управление NuGet пакетов**.\n\n    ![Добавление пакета адаптивной карты1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. В **NuGet ProactiveBot** выберите **Обзор** и поиск **адаптивной системы.** Нажмите кнопку **Установить**. \n\n    ![Добавление пакета адаптивной карты2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. Откройте файл **NotifyController.cs** и замените существующий код следующим кодом для отправки сообщения `BotCallback` адаптивной карты:     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. Наведите курсор над красной строкой squiggly и выберите **с помощью AdaptiveCards** для устранения ошибок. \n\n    ![Устранение ошибки](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. Нажмите **кнопку F5** для запуска кода. \n1. Перейдите Teams и удалить приложение. \n    \n    ![Приложение Uninstall](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. Переустановить то же приложение, чтобы получить `conversationUpdate` событие.   \n\n1. Выберите [http://localhost:3978/api/notify](http://localhost:3978/api/notify) URL-адрес, чтобы получить упреждающий привет в адаптивной карте.     \n"
- title: Полная задача
  durationInMinutes: 3
  content: >
    Вы придумали что-то подобное? Вот как отображается проактивное сообщение привета в Адаптивной карте:


    ![активный привет в адаптивной карте](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    Сценарий выполнен.

    * Вы можете отправлять уведомления на ежедневной основе или запрашивать отзывы от пользователя на периодической основе.

    * Обработать ограничения регулирования, чтобы избежать нескольких уведомлений.
