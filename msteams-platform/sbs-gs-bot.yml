### YamlMime:Tutorial
title: Создание первого приложения-бота с помощью JavaScript
metadata:
  title: Hello World с JavaScript
  description: В этом руководстве вы узнаете, как создавать Hello World с помощью JavaScript.
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Общие сведения о начало работы
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 5470c659ee97d1a52ec6135cb72586e67925e6f0
  ms.sourcegitcommit: 80edf3c964bb47a2ee13f9eda4334ad19e21f331
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 05/24/2022
  ms.locfileid: "65655618"
items:
- durationInMinutes: 1
  content: "Начните Microsoft Teams разработку приложения с помощью первого Teams приложения. Вы создадите приложение-бот с Teams. \n\nВаше приложение будет иметь возможность, которая поставляется с собственным пользовательским интерфейсом и пользовательским интерфейсом:\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"Схема, показывающая, что это приложение имеет три функции.\" border=\"false\":::\n\n> [!NOTE]\n> В этом руководстве вы создадите приложение бота.\n\nВ этом руководстве вы узнаете:\n\n- Настройка нового проекта с помощью Teams Toolkit.\n- Создание приложения-бота.\n- Развертывание приложения.\n"
- title: Предварительные требования
  durationInMinutes: 1
  content: "\nНиже приведен список средств, необходимых для создания и развертывания приложений.\n\n| &nbsp; | Установка | Для использования... |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Набор средств Teams](#install-the-teams-toolkit) | Расширение Microsoft Visual Studio Code, которое создает шаблон проекта для вашего приложения. Используйте версию 4.0.0. |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams для взаимодействия в одном месте со всеми пользователями, с которыми вы работаете, с помощью приложений для чата, собраний и звонков.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Серверной среды выполнения JavaScript. Используйте последнюю версию версии 16 LTS.|\n| &nbsp; | [Microsoft&nbsp; Edge](https://www.microsoft.com/edge) (рекомендуется) или [Google Chrome](https://www.google.com/chrome/) | Браузера со средствами разработчика. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download); | Сред сборки JavaScript, TypeScript или SharePoint Framework (SPFx). Используйте версию 1.55 или более позднюю. |\n| **Необязательное** | &nbsp; | &nbsp; |\n| &nbsp; | [Средства Azure для Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) [и Azure CLI](/cli/azure/install-azure-cli) | Средства Azure для доступа к хранимых данных или развертывания облачной серверной части для Teams в Azure. |\n| &nbsp; | [React средств разработчика для Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) [или React developer Tools для MicrosoftEdge&nbsp;](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | Расширение DevTools браузера для библиотеки JavaScript React с открытым кодом. |\n| &nbsp; | [Песочница Microsoft Graph](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer — это браузерное средство, которое позволяет выполнять запросы из microsoft Graph данных. |\n| &nbsp; | [Портал разработчика Teams](https://dev.teams.microsoft.com/) | Веб-портала для настройки, управления и распространения приложений Teams, в том числе в вашей организации или магазине Teams. |\n\n\n> [!TIP]\n> Если вы работаете с данными Microsoft Graph, вам следует изучить и закладки Microsoft Graph Explorer. Это средство на основе браузера позволяет запрашивать microsoft Graph за пределами приложения.\n\n\n## <a name=\"prepare-development-environment\"></a>Подготовка среды разработки\n\nПосле установки необходимых средств настроите среду разработки.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Установка Teams Toolkit\n\nНабор Teams помогает упростить процесс разработки с помощью средств для подготовки и развертывания облачных ресурсов для приложения, публикации в хранилище Teams и т. д. \n \nНабор средств можно использовать с Visual Studio Code интерфейсом командной строки или интерфейсом командной строки`TeamsFx`.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Откройте Visual Studio Code и выберите представление расширений  (**CTRL+SHIFT+X** / **⌘⇧-X** или расширения **> представлений**).\n1. В поле поиска введите **Teams Toolkit**.\n1. Выберите **\"Установить**\" рядом с Teams Toolkit.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"Иллюстрация установки Teams Toolkit.\" border=\"false\":::\n\n Значок Teams Toolkit отображается на Visual Studio Code боковой панели после установки.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Иллюстрация: значок Teams Toolkit на Visual Studio Code боковой панели.\" border=\"false\":::\n\nНабор средств Teams также можно найти [на Visual Studio Code Marketplace.](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension)\n\n# <a name=\"command-line\"></a>[Командная строка](#tab/cli)\n\nЧтобы установить CLI TeamsFx, используйте диспетчер `npm` пакетов:\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nВ зависимости от конфигурации может `sudo` потребоваться установить интерфейс командной строки:\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nЭто условие чаще используется в Linux и macOS системах.\n\nУбедитесь, что вы npm глобальный кэш в PATH. Этот шаг обычно выполняется как часть Node.js установщика.  \n\nС командой можно использовать интерфейс командной строки `teamsfx` . Убедитесь, что команда работает, выполнив команду `teamsfx -h`.\n\n> [!CAUTION]\n> Перед запуском TeamsFx в терминалах PowerShell необходимо включить политику удаленного подписанного выполнения для PowerShell.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Настройка клиента Teams разработки\n\nКлиент **—** это пространство или контейнер для вашей организации в Teams, где вы беседируете, делитесь файлами и выполняете собрания. В этом пространстве также можно загрузить неопубликованное приложение и протестировать его. Давайте посмотрим, готовы ли вы к разработке с клиентом.\n\n### <a name=\"check-for-sideloading-option\"></a>Проверка параметра загрузки неопубликованных приложений\n\nПосле создания приложения необходимо загрузить это приложение в Teams, не распространяя его. Этот процесс называется загрузкой без публикации. Войдите в учетную запись Microsoft 365, чтобы просмотреть этот параметр.\n\n > [!NOTE]\n > Загрузка неопубликованных приложений необходима для предварительного просмотра и тестирования приложений в Teams локальной среде. Если он не включен, вы не сможете просмотреть и протестировать приложение в Teams локально.\n\nУ вас уже есть клиент и у вас есть доступ администратора? Давайте посмотрим, действительно ли вы работаете!\n\nПроверьте, можно ли загрузить неопубликованные приложения в Teams:\n\n 1. В клиенте Teams выберите значок **Магазина**.\n 1. Выберите **Управление приложениями**\n 1. Выберите **Опубликовать приложение**.\n 1. Найдите параметр для **отправки пользовательского приложения**. Если вы видите этот параметр, загрузка неопубликованных приложений включена.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"На рисунке показан параметр для отправки пользовательского приложения в Teams.\":::\n\n     > [!NOTE]\n     > Если у вас нет возможности отправить пользовательское приложение, обратитесь к Teams администратору.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Создание бесплатного клиента Teams разработчика (необязательно)\n\nЕсли у вас нет учетной записи Teams разработчика, ее можно получить бесплатно. Присоединяйтесь к Microsoft 365 разработчика!\n\n1. Перейдите в [программу для разработчиков Microsoft 365](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Нажмите **кнопку \"Присоединиться сейчас** \" и следуйте инструкциям на экране.\n1. На экране приветствия выберите **\"Настройка подписки E5\"**.\n1. Настройте свою учетную запись администратора. После завершения отобразится следующий экран.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Корпорация Майкрософт\" border=\"true\":::\n\n1. Войдите в Teams учетную запись администратора, которую вы только что настроили. Убедитесь, что у вас есть **параметр \"Отправить** пользовательское приложение\" в Teams.\n\n## <a name=\"get-a-free-azure-account\"></a>Получение бесплатной учетной записи Azure\n\nЕсли вы хотите разместить приложение или получить доступ к ресурсам в Azure, у вас должна быть подписка Azure. [Создайте бесплатную учетную запись](https://azure.microsoft.com/free/) перед началом работы.\n\nТеперь у вас есть все средства и настроена учетная запись. Теперь давайте настроим среду разработки и приступим к созданию. Выберите приложение, которое вы хотите сделать в первую очередь.\n"
- title: Создание рабочей области проекта для приложения-бота
  durationInMinutes: 1
  content: "\nДавайте создадим первое бот-приложение.\n\nВозможность бота приложения Teams создает чат-бот или чат-бот. Он используется для выполнения простых и автоматизированных задач, таких как предоставление обслуживания клиентов. Бот взаимодействует с веб-службой и помогает использовать ее предложения. Вы можете получить прогноз погоды, резервирования или любую другую службу, предлагаемую с помощью чат-бота.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"Схема, показывающая, что это приложение имеет три функции. Бот выделен.\" border=\"false\":::\n\nТак как вы уже подготовили эти приложения, вы можете настроить новый проект Teams для создания приложения-бота.\n\nВ этом руководстве вы узнаете:\n\n1. [Как настроить новый проект бота с помощью Teams Toolkit.](#create-your-bot-project-workspace)\n1. [Сведения о структуре каталогов проекта приложения.](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> В настоящее время боты доступны в средах облака сообщества для государственных организаций (GCC), но недоступны для GCC-High и Министерства обороны (DOD).\n\n## <a name=\"create-your-bot-project-workspace\"></a>Создание рабочей области проекта бота\n\nЕсли необходимые условия уже выполнены, начнем!\n\n> [!NOTE]\n> Отображаемый Visual Studio Code пользовательского интерфейса — mac. Он может отличаться в зависимости от операционной системы, Teams версии набора средств и среды.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Откройте Visual Studio Code.\n1. Выберите значок Набор инструментов Teams:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: на боковой панели Visual Studio Code.\n\n1. Выберите **Создать приложение Teams**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Расположение ссылки &quot;Создать проект&quot; на боковой панели набора средств Teams\" border=\"false\":::.\n\n1. Выберите **\"Создать новое Teams,** чтобы создать приложение с помощью Teams Toolkit.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"Запуск мастера для создания проекта\" border=\"false\":::\n\n1. Выберите **\"Бот**\" и нажмите кнопку **\"ОК\"**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"Снимок экрана: добавление возможностей в новое приложение.\" border=\"false\":::\n\n1. Выберите **JavaScript** в разделе **\"Язык программирования** \".\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"Снимок экрана: выбор языка.\" border=\"false\":::\n\n1. Введите подходящее имя для приложения, например `hellobot`. Убедитесь, что имя приложения буквенно-цифровое. Выберите **ВВОД**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"Снимок экрана, показывающий, где ввести имя приложения.\" border=\"false\":::\n\n    Ваше Teams с возможностью бота будет создано через несколько секунд.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"Снимок экрана: созданное приложение.\" border=\"false\":::\n\n    После создания приложения набор средств Teams отображает сообщение с указанием расположения, в котором создается рабочая область проекта. Эта папка является расположением по умолчанию, указанным Visual Studio Code параметрах.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"Сообщение о расположении\":::\n\n    Сообщение предлагает два варианта:\n    \n    - **Изменение расположения**\n    - **Локальная отладка**\n    \n    В этом руководстве не нужно использовать эти параметры.\n\n    > [!NOTE]\n    > Если вы решили изменить расположение рабочей области, это отражается только для проектов, созданных после перезагрузки Visual Studio Code. Расположение существующих проектов не изменяется.\n\n<details>\n<summary>Краткий обзор создания Teams приложения.</summary>\nПросмотрите этот краткий обзор для создания Teams приложения.\n\n![Создание Teams приложения](~/assets/videos/javascript-bot-app1.gif)\n</details>\n\n# <a name=\"command-line\"></a>[Командная строка](#tab/cli)\n\nИспользуйте для создания первого проекта интерфейс командной строки `teamsfx`.  Начните с папки, в которой будет создана папка проекта.\n\n``` bash\nteamsfx new\n```\n\nС помощью интерфейса командной строки можно создать новое Teams приложения. Интерфейс командной строки позволяет ответить на ряд вопросов. Каждый вопрос содержит инструкцию по ответу на него.\n\nНапример, используйте клавиши со стрелками для выбора параметра. После выбора нажмите клавишу **ВВОД** , чтобы подтвердить его.\n\n1. Выберите **Создать приложение Teams**.\n1. Выберите **\"Бот\"** и снимите **флажок \"Отменить выбор\"**.\n1. Выберите **JavaScript** в качестве языка.\n1. Нажмите **клавишу ВВОД** , чтобы выбрать папку рабочей области по умолчанию.\n1. Введите подходящее имя для приложения, например `HelloBot`.  Имя приложения должно состоять только из букв и цифр.\n\nПосле того как вы ответите на все вопросы, проект будет создан.\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>Ознакомьтесь с исходным кодом приложения-бота\n\nПосле завершения формирования шаблонов просмотрите каталоги и файлы проекта в области обозревателя Visual Studio Code.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-folder-structure-bot-new.png\" alt-text=\"вкладка hw new\" border=\"true\":::\n\n| Имя папки | Содержание |\n| --- | --- |\n| `.fx/configs` | Файлы конфигурации, которые пользователь может настроить для Teams приложения. |\n| `.fx/configs/config.<envName>.json` | Файл конфигурации для каждой среды. |\n| `.fx/configs/azure.parameters.<envName>.json` | Файл параметров для подготовки Azure BICEP для каждой среды. |\n| `.fx/configs/projectSettings.json` | Глобальные параметры проекта, которые применяются ко всем средам. |\n| `.fx/states` | Подготовьте выходные данные, созданные набором средств.  Набор средств создает эту папку после подготовки ресурсов для приложения. |\n| `.fx/states/state.<envName>.json` | Подготовка выходного файла для каждой среды. |\n| `.fx/states/<env>.userdata` | Конфиденциальные данные пользователя для выходных данных подготовки для каждой среды. |\n| `bot` |  Код для возможности бота, необходимой во время выполнения. |\n| `bot/teamsBot.js` | Основная точка входа для приложения-бота. |\n| `templates/appPackage` | Файлы шаблонов манифеста приложения и значки приложений, color.png и outline.png. |\n| `templates/appPackage/manifest.template.json` | Манифест приложения для запуска приложения в локальной и удаленной среде.  |\n| `templates/azure` | Файлы шаблонов BICEP |\n\n> [!Tip]\n> Перед интеграцией своего первого бота в Teams ознакомьтесь с ботами за пределами Teams.\n"
- title: Создание и запуск первого приложения-бота
  durationInMinutes: 1
  content: "\nПосле настройки рабочей области проекта с Teams Toolkit создайте проект бота. Убедитесь, что вы вошли в свою учетную запись Microsoft 365 учетной записи.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Вход в учетную запись Microsoft 365 учетной записи\n\nИспользуйте эту учетную запись для входа в Teams. Если вы используете клиент Microsoft 365 разработчика, учетная запись администратора, настроенная при регистрации, является Microsoft 365 учетной записью разработчика.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Откройте Visual Studio Code.\n1. Щелкните значок Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: на боковой панели.\n1. Выберите **\"Войти в M365\"**.\n\n    Откроется веб-браузер по умолчанию, позволяющий войти в учетную запись.\n\n1. Войдите в свою учетную Microsoft 365 учетной записи, используя свои учетные данные.\n1. Закройте браузер при появлении запроса и вернитесь к Visual Studio Code.\n1. Вернитесь к Teams Toolkit в Visual Studio Code.\n\n    Используйте эту учетную запись для входа в Teams. Если вы используете клиент Microsoft 365 разработчика, учетная запись администратора, настроенная при регистрации, является Microsoft 365 учетной записью разработчика.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Снимок экрана: вход в Microsoft 365 Azure.\" border=\"false\":::\n\n    Теперь вы готовы создать приложение и запустить его локально!\n\n# <a name=\"command-line\"></a>[Командная строка](#tab/cline)\n\n1. Войдите в Microsoft 365 с помощью Командной строки TeamsFx:\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Откроется веб-браузер по умолчанию, позволяющий войти в учетную запись. Войдите в учетную запись Azure, используя свои учетные данные. Закройте браузер при появлении запроса.\n\n2. Войдите в Azure с помощью Командной строки TeamsFx:\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Откроется веб-браузер по умолчанию, позволяющий войти в учетную запись. Войдите в учетную запись Azure, используя свои учетные данные. Закройте браузер при появлении запроса.\n\n    Имена входа учетной записи совместно используются Visual Studio Code и Интерфейс командной строки TeamsFx.\n\n    Теперь, когда среда разработки настроена, вы можете создавать, создавать и развертывать Teams приложения.\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>Создание и запуск первого приложения-бота локально\n\nЧтобы создать и запустить приложение в локальной среде, выполните следующие действия.\n\n1. Нажмите **клавишу F5** Visual Studio Code, чтобы запустить приложение в режиме отладки.\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>Узнайте, что происходит при локальном запуске приложения в отладчике.</summary>\n\n    Если вам интересно, при нажатии клавиши **F5** Teams Toolkit:\n\n    1. Проверяет все следующие предварительные требования:\n      - Вы вошли с помощью учетной записи Microsoft 365 учетной записи.\n      - Загрузка неопубликованных приложений включена для Microsoft 365 учетной записи.\n      - Поддерживается Node.js установлена версия.\n      - Устанавливаются пакеты NPM для приложения-бота.\n      - Ngrok установлен.\n      - Доступен порт, необходимый для приложения-бота.\n\n      > [!NOTE]\n      > Если Teams toolkit не может проверить определенное необходимое условие, вам будет предложено проверить его.\n\n    2. Запускает Ngrok для создания туннеля HTTP.\n    3. Регистрирует приложение в Azure AD и настраивает приложение.\n    4. Регистрирует приложение бота в Bot Framework и настраивает приложение бота.\n    5. Регистрирует приложение на портале Teams разработчика и настраивает приложение.\n    6. Запускает приложение бота.\n    7. Запускает Teams в веб-браузере и загрузку неопубликованного приложения бота.\n\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"Снимок экрана: нажатие клавиши F5 для отладки.\":::\n\n    > [!NOTE]\n    > При первом запуске приложения скачиваются все зависимости и создается приложение. По завершении сборки автоматически откроется окно браузера. Этот процесс может занять 3–5 минут.\n\n    Teams запускает приложение в веб-браузере.\n\n1. При появлении запроса войдите с помощью Microsoft 365 учетной записи.\n\n1. Выберите **\"Добавить**\" при появлении запроса на загрузку неопубликованного приложения Teams на локальном компьютере.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"Снимок экрана, показывающий, что бот добавляется в Teams клиенте.\":::\n\n    Теперь бот успешно запущен на Teams! После загрузки приложения открывается сеанс чата с ботом.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"Снимок экрана: бот выполняется на Teams клиенте.\":::\n\n    Вы можете ввести `welcome` вводную карточку и `learn` перейти к документации по адаптивной карточке и команде бота.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Снимок экрана: карточка learn в боте на Teams клиенте.\":::       \n\n    Вы можете выполнять обычные действия отладки, такие как установка точек останова, как и в любом другом веб-приложении. Откройте файл `bot/teamsBot.js` и найдите метод `onMessage()`. Установите точку останова в любом случае. Затем введите текст.\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Узнайте, как устранять неполадки, если приложение не выполняется локально.</summary>\n\n  Чтобы успешно запустить приложение в Teams, убедитесь, что вы включили загрузку неопубликованных приложений в Teams учетной записи. Дополнительные сведения о загрузке неопубликованных приложений см. в разделе \"Предварительные требования\".\n\n  > [!IMPORTANT]\n  > В настоящее время неопубликованные приложения доступны облако сообщества для государственных организаций (GCC), GCC High и DOD.\n\n  > [!TIP]\n  > Проверьте наличие проблем перед загрузкой неопубликованного приложения с помощью средства [проверки приложения](https://dev.teams.microsoft.com/appvalidation.html). Это средство включено в набор средств. Исправьте ошибки для загрузки неопубликованного приложения.\n  </details> \n"
- title: Развертывание первого Teams приложения
  durationInMinutes: 1
  content: "\nВы узнали, как создавать, создавать и запускать Teams с возможностями Бота. Последним шагом является развертывание приложения в Azure.\n\nДавайте развернем первое приложение с возможностью бота в Azure с помощью Teams Toolkit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Вход в учетную запись Azure\n\nИспользуйте эту учетную запись для доступа к порталу Microsoft Azure и подготовки новых облачных ресурсов для поддержки приложения.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Откройте Visual Studio Code.\n1. Откройте папку проекта, в которой вы создали приложение вкладки.\n1. Щелкните значок Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: на боковой панели.\n1. Выберите **\"Войти в Azure\"**.\n\n    > [!TIP]\n    > Если у вас установлено расширение учетной записи Azure и используется та же учетная запись, этот шаг можно пропустить. Используйте ту же учетную запись, что и в других расширениях.\n\n    Откроется веб-браузер по умолчанию, позволяющий войти в учетную запись.\n1. Войдите в учетную запись Azure, используя свои учетные данные.\n1. Закройте браузер при появлении запроса и вернитесь к Visual Studio Code.\n\n    В **разделе ACCOUNTS** на боковой панели две учетные записи отображаются отдельно. В нем также перечислены доступные для использования подписки Azure. Убедитесь, что у вас есть по крайней мере одна доступная подписка Azure. В противном случае выйдите из системы и используйте другую учетную запись.\n\n    Теперь вы готовы развернуть приложение в Azure!\n\n    Поздравляем! Вы создали Teams приложения! \n    Теперь давайте рассмотрим, как развернуть одно из приложений в Azure с помощью Teams Toolkit.\n\n# <a name=\"command-line\"></a>[Командная строка](#tab/cline)\n\n1. Войдите в Microsoft 365 с помощью Командной строки TeamsFx:\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Откроется веб-браузер по умолчанию, позволяющий войти в учетную запись. Войдите в учетную запись Azure, используя свои учетные данные. Закройте браузер при появлении запроса.\n\n2. Войдите в Azure с помощью Командной строки TeamsFx:\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Откроется веб-браузер по умолчанию, позволяющий войти в учетную запись. Войдите в учетную запись Azure, используя свои учетные данные. Закройте браузер при появлении запроса.\n\n    Имена входа учетной записи совместно используются Visual Studio Code и Интерфейс командной строки TeamsFx.\n\n    Поздравляем! Вы создали Teams приложения! \n    Теперь давайте рассмотрим, как развернуть одно из приложений в Azure с помощью Teams Toolkit.\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Узнайте, что происходит после развертывания приложения в Azure</summary>\n\n  До развертывания приложение работает локально:\n\n  * Серверная часть работает с использованием **Azure Functions Core Tools**.\n  * Конечная точка HTTP приложения, в которую Microsoft Teams загружает приложение, работает локально.\n\n  Развертывание выполняется в два этапа. Вы подготавливаете ресурсы в активной подписке Azure, а затем развертываете или отправляете серверный и внешний код приложения в Azure.\n\n  * При настройке серверная часть использует различные службы Azure, включая Служба приложений Azure и служба хранилища Azure.\n  * Клиентское приложение будет развернуто под учетной записью хранилища Azure, настроенной для статического размещения веб-сайтов.\n\n  </details>\n"
- title: Поздравляем!
  durationInMinutes: 1
  content: "\nВы сделали это!\n\nВы создали приложение-бот.\n\nТеперь, когда вы узнали, как создать базовое приложение, можно перейти к созданию более сложных приложений. Для начала попробуйте добавить возможности в существующие приложения.\n\nЧтобы добавить возможности в существующее приложение:\n\n1. Выберите **\"Добавить компоненты**\" в разделе **\"** Разработка\" на боковой панели Teams Toolkit.\n\n1. Выберите возможность, которую вы хотите добавить в приложение.\n\nВот и все! Teams Toolkit добавляет шаблон для новой возможности в структуру каталогов приложения. Выполните процедуры сборки и развертывания приложения, и ваше приложение будет иметь несколько возможностей. \n\nВы завершили работу с руководством по созданию бота с помощью JavaScript."
